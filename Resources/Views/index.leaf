<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="style.css" rel="stylesheet"></link>
  <title>#(title)</title>
  <style>
    .custom-btn {
      width: 80px;
      height: 40px;
      padding: 0;
    }
  </style>
</head>

<body>

  <div class="d-flex">
    <!-- Sidebar -->
    <div class="sidebar position-relative">

      <h1><a href="/admin" class="text-light text-decoration-none">BeeMin</a></h1>

      <div id="tabs" class="tabs">
        <a href="/admin?list=words" class="nav-link" data-list="words">Words</a>
        <a href="/admin?list=truefalse" class="nav-link" data-list="truefalse">True False</a>
        <a href="/admin?list=grammar" class="nav-link" data-list="grammar">Grammar</a>
        <a href="/admin?list=music" class="nav-link" data-list="music">Music</a>
        <a href="/admin?list=movie" class="nav-link" data-list="movie">Movie</a>
        <a href="/admin?list=podcast" class="nav-link" data-list="podcast">Podcast</a>
        <a href="/admin?list=user" class="nav-link" data-list="user">Users</a>

        <a href="#" class="nav-link" id="logoutBtn">Logout</a>
      </div>
      
    </div>

    <!-- Content -->
    <div class="content" id="content">

      #if(listMode):
        <form action="/upload-data" method="post" enctype="multipart/form-data">
            <div class="form-group w-25">
              <input class="form-control" type="file" name="file" value="file" id="formFile" accept=".xlsx">
            </div>
            <div class="d-flex align-items-center justify-content-between mt-3">
                <button class="btn btn-primary" type="submit" value="upload">Upload</button>
                
                <form id="searchForm" onsubmit="return false;">
                    <input type="text" id="searchQuery" placeholder="Tìm kiếm..." oninput="searchList()" class="form-control w-25" />
                </form>
            </div>
          </form>
        
        <br>
        <table class="table table-striped" id="resultTable">
            #if(listMode == "words"):
              <thead class="table-dark">
                <tr>
                  <th scope="col">English</th>
                  <th scope="col">Meaning</th>
                  <th scope="col">Action</th>
                </tr>              
              </thead>
              <tbody>
                #for(item in list):
                  <tr class="align-middle">
                    <td>#(item.englishWord)</td>
                    <td>#(item.vietnameseMeaning)</td>
                    <td> 
                      <button type="" class="btn btn-primary custom-btn" onclick="editWord('#(item.id)', '#(item.englishWord)', '#(item.vietnameseMeaning)')">Update</button> 
                      <button type="" class="btn btn-danger custom-btn" onclick="deleteItem('#(item.id)', 'words')">Delete</button> 
                    </td>
                  </tr>
                #endfor                 
              </tbody>
            #elseif(listMode == "truefalse"):
                <thead class="table-dark">
                  <tr>
                    <th scope="col">Content</th>
                    <th scope="col">Meaning</th>
                    <th scope="col">Answer</th>
                    <th scope="col">Correction</th>
                    <th scope="col">Topic</th>
                    <th scope="col">Action</th>
                  </tr>              
                </thead>
                <tbody>
                  #for(item in list):
                    <tr>
                      <td>#(item.content)</td>
                      <td>#(item.vietnameseMeaning)</td>
                      <td>#(item.answer)</td>
                      <td>#(item.correction)</td>
                      <td>#(item.topic)</td>
                      <td> 
                        <button type="" class="btn btn-primary custom-btn mb-2" onclick="editTrueFalse('#(item.id)', '#(item.content)', '#(item.vietnameseMeaning)', '#(item.answer)', '#(item.correction)', '#(item.topic)')">Update</button> 
                        <button type="" class="btn btn-danger custom-btn" onclick="deleteItem('#(item.id)', 'truefalse')">Delete</button> 
                      </td>
                    </tr>
                  #endfor 
                </tbody>
            #elseif(listMode == "grammar"):
                <thead class="table-dark">
                    <tr>
                      <th scope="col">Content</th>
                      <th scope="col">Meaning</th>
                      <th scope="col">Topic</th>
                      <th scope="col">Level</th>
                      <th scope="col">Action</th>
                    </tr>              
                  </thead>
                  <tbody>
                    #for(item in list):
                      <tr>
                        <td>#(item.question)</td>
                        <td>#(item.meaning)</td>
                        <td>#(item.topic)</td>
                        <td>#(item.level)</td>
                        <td> 
                          <button type="" class="btn btn-primary custom-btn"  onclick="editGrammar('#(item.id)','#(item.question)', '#(item.meaning)' , '#(item.topic)', '#(item.level)')">Update</button> 
                          <button type="" class="btn btn-danger custom-btn" onclick="deleteItem('#(item.id)', 'grammarquestions')">Delete</button> 
                        </td>
                      </tr>
                    #endfor 
                  </tbody>
            #elseif(listMode == "music"):
                  <thead class="table-dark">
                    <tr>
                      <th scope="col">Title</th>
                      <th scope="col">Description</th>
                      <th scope="col">Duration</th>
                      <th scope="col">YouTube link</th>
                      <th scope="col">Action</th>
                    </tr>              
                  </thead>
                  <tbody>
                    #for(item in list):
                      <tr>
                        <td>#(item.title)</td>
                        <td>#(item.description)</td>
                        <td>#(item.duration)</td>
                        <td>#(item.link_on_youtube)</td>
                        <td> 
                          <button type="" class="btn btn-primary custom-btn mb-2">Update</button>
                          <button type="" class="btn btn-danger custom-btn">Delete</button> 
                        </td>
                      </tr>
                    #endfor 
                  </tbody>
            #elseif(listMode == "movie"):
                  <thead class="table-dark">
                    <tr>
                      <th class="col-2">Title</th>
                      <th class="col-1">Poster</th>
                      <th class="col-1">Banner</th>
                      <th class="col-3">Description</th>
                      <th class="col-1">Duration</th>
                      <th class="col-1">Genre</th>
                      <th class="col-1">Rating</th>
                      <th class="col-1">Year</th>
                      <th class="col-1">Action</th>
                    </tr>              
                  </thead>
                  <tbody>
                    #for(item in list):
                      <tr>
                        <td>#(item.title)</td>
                        <td><img src="#(item.poster)" alt="Poster" style="width: 100%; height: auto;"></td>
                        <td><img src="#(item.banner)" alt="Banner" style="width: 100%; height: auto;"></td>
                        <td>#(item.description)</td>
                        <td>#(item.duration) mins</td>
                        <td>#(item.genre)</td>
                        <td>#(item.rating)</td>
                        <td>#(item.year)</td>
                        <td> 
                          <button type="" class="btn btn-primary custom-btn mb-2" onclick="editMovie('#(item.id)', '#(item.title)', '#(item.poster)', '#(item.banner)', '#(item.description)', '#(item.duration)', '#(item.genre)', '#(item.rating)', '#(item.year)')">Update</button>
                          <button type="" class="btn btn-danger custom-btn" onclick="deleteItem('#(item.id)', 'movies')">Delete</button>
                        </td>
                      </tr>
                    #endfor 
                  </tbody>
            #elseif(listMode == "podcast"):
                  <thead class="table-dark">
                    <tr>
                      <th class="col">Title</th>
                      <th class="col-2">Image</th>
                      <th class="col">Description</th>
                      <th class="col">Duration</th>
                      <th class="col">Views</th>
                      <th class="col">Link on YouTube</th>
                      <th class="col">Action</th>
                    </tr>              
                  </thead>
                  <tbody>
                    #for(item in list):
                      <tr>
                        <td>#(item.title)</td>
                        <td><img src="#(item.image_url)" alt="image_url" style="width: 100%; height: auto;"></td>
                        <td>#(item.description)</td>
                        <td>#(item.duration)</td>
                        <td>#(item.views)</td>
                        <td><a href="#(item.link_on_youtube)">#(item.link_on_youtube)</a></td>
                        <td> 
                          <button type="" class="btn btn-primary custom-btn mb-2" onclick="editPodcast('#(item.id)', '#(item.title)', '#(item.image_url)', '#(item.description)', '#(item.duration)', #(item.views) ,'#(item.link_on_youtube)')">Update</button>
                          <button type="" class="btn btn-danger custom-btn" onclick="deleteItem('#(item.id)', 'podcast')">Delete</button>
                        </td>
                      </tr>
                    #endfor 
                  </tbody>
            #elseif(listMode == "user"):
                  <thead class="table-dark">
                    <tr>
                      <th class="col">Name</th>
                      <th class="col-2">Email</th>
                      <th class="col-2">Honey Jar</th>
                      <th class="col-2">Created at</th>
                      <th class="col">Action</th>
                    </tr>
                  </thead>
                  <tbody id="tableBody">
                    #for(item in list):
                      <tr data-id="#(item.id)" data-name="#(item.username)" data-email="#(item.email)" data-honeyjar="#(item.honey_jar)" data-createdat="#(item.createdAt)">
                        <td>#(item.username)</td>
                        <td>#(item.email)</td>
                        <td>
                            #(item.honey_jar)
                            <img src="/images/honey-jar.png" alt="Honey Jar" style="width: 30px; height: auto; margin-bottom: 4px">
                        </td>
                        <td>#dateFormat(item.createdAt, "dd/MM/yyyy")</td>
                        <td>
                          <button type="" class="btn btn-primary custom-btn">Update</button>
                          <button type="" class="btn btn-danger custom-btn" onclick="">Delete</button>
                        </td>
                      </tr>
                    #endfor
                  </tbody>
            #endif
        </table>


        <div id="editModalWord" class="modal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Word</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form id="editFormWord">
                  <div class="mb-3">
                    <label class="form-label">English Word:</label>
                    <input type="text" class="form-control" id="englishWord_w" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Vietnamese Meaning:</label>
                    <input type="text" class="form-control" id="vietnameseMeaning_w" required>
                  </div>
                  <button type="button" class="btn btn-primary" onclick="saveWord()">Save</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                </form>
              </div>
            </div>
          </div>
        </div>

        <div class="modal" tabindex="-1" id="editModalTrueFalse" aria-labelledby="editModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit True/False Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form id="editFormTrueFalse">
                  <div class="mb-3">
                    <label class="form-label">Content:</label>
                    <input type="text" class="form-control" id="content_tf" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Vietnamese Meaning:</label>
                    <input type="text" class="form-control" id="vietnameseMeaning_tf" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Answer:</label>
                    <input type="text" class="form-control" id="answer_tf" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Correction:</label>
                    <input type="text" class="form-control" id="correction_tf" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Topic:</label>
                    <input type="text" class="form-control" id="topic_tf" required>
                  </div>
                  <button type="button" class="btn btn-primary" onclick="saveTrueFalse()">Save</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                </form>
              </div>
            </div>
          </div>
        </div>

        <div class="modal" tabindex="-1" id="editModalGrammar" aria-labelledby="editModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Grammar Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form id="editFormGrammar">
                  <div class="mb-3">
                    <label class="form-label">Content:</label>
                    <input type="text" class="form-control" id="content_gr" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Meaning:</label>
                    <input type="text" class="form-control" id="meaning_gr" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Topic:</label>
                    <input type="text" class="form-control" id="topic_gr" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Level:</label>
                    <input type="text" class="form-control" id="level_gr" required>
                  </div>
                  <button type="button" class="btn btn-primary" onclick="saveGrammar()">Save</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                </form>
              </div>
            </div>
          </div>
        </div>

        <div class="modal" tabindex="-1" id="editModalMovie" aria-labelledby="editModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Movie</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form id="editFormMovie">
                  <div class="mb-3">
                    <label class="form-label">Title:</label>
                    <input type="text" class="form-control" id="title_mv" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Poster:</label>
                    <input type="text" class="form-control" id="poster_mv" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Banner:</label>
                    <input type="text" class="form-control" id="banner_mv" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Description:</label>
                    <input type="text" class="form-control" id="description_mv" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Duration:</label>
                    <input type="text" class="form-control" id="duration_mv" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Genre:</label>
                    <input type="text" class="form-control" id="genre_mv" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Rating:</label>
                    <input type="text" class="form-control" id="rating_mv" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Year:</label>
                    <input type="text" class="form-control" id="year_mv" required>
                  </div>
                  <button type="button" class="btn btn-primary" onclick="saveMovie()">Save</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                </form>
              </div>
            </div>
          </div>
        </div>

        <div class="modal" tabindex="-1" id="editModalPodcast" aria-labelledby="editModalLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Podcast</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <form id="editFormPodcast">
                  <div class="mb-3">
                    <label class="form-label">Title:</label>
                    <input type="text" class="form-control" id="title_pc" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Image:</label>
                    <input type="text" class="form-control" id="image_pc" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Description:</label>
                    <input type="text" class="form-control" id="description_pc" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Duration:</label>
                    <input type="text" class="form-control" id="duration_pc" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Views:</label>
                    <input type="text" class="form-control" id="views_pc" required>
                  </div>
                  <div class="mb-3">
                    <label class="form-label">Link on YouTube:</label>
                    <input type="text" class="form-control" id="linkYT_pc" required>
                  </div>
                  <button type="button" class="btn btn-primary" onclick="savePodcast()">Save</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                </form>
              </div>
            </div>
          </div>
        </div>
        

      #else:
        <h2>Chào mừng đến với trang quản lý!</h2>
        <p>Hãy chọn một chức năng từ thanh điều hướng bên trái để xem nội dung.</p>
        <p>#(statusMessage)</p>
      #endif
    </div>
  </div>


<script>
  const apiBaseUrl = "http://167.71.173.13:9000";

  document.getElementById('logoutBtn').addEventListener('click', function(event) {
      event.preventDefault();
      window.location.href = "http://167.71.173.13:9000/login";
  });

  document.addEventListener("DOMContentLoaded", () => {
    const params = new URLSearchParams(window.location.search);
    const currentList = params.get("list");

    const sidebarLinks = document.querySelectorAll(".sidebar .nav-link");

    sidebarLinks.forEach(link => {
      if (link.getAttribute("data-list") === currentList) {
        link.classList.add("text-light", "bg-primary");
      } else {
        link.classList.remove("text-light", "bg-primary");
      }
    });
  });

  async function deleteItem(id, model) {
    console.log("Deleting item with ID:", id);

    if (confirm("Are you sure you want to delete this item?")) {
      try {
        const response = await fetch(`${apiBaseUrl}/${model}/${id}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
          },
        });
        console.log("response: ", response);
        if (response.ok) {
          alert("Item deleted successfully!");

          document.location.reload();
        } else {
          alert("Failed to delete item. Please try again.");
        }
      } catch (error) {
        console.error("Error deleting item:", error);
        alert("An error occurred. Please try again.");
      }
    }
  }
    
  function searchList() {
    const query = document.getElementById('searchQuery').value.toLowerCase();
    const tableBody = document.getElementById('tableBody');
    const rows = tableBody.getElementsByTagName('tr');
    
    // Loop over each row in the table
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const username = row.getAttribute('data-name').toLowerCase();
        const email = row.getAttribute('data-email').toLowerCase();
        const honeyJar = row.getAttribute('data-honeyjar').toLowerCase();
        const createdAt = row.getAttribute('data-createdat').toLowerCase();
        
        // Check if any column matches the search query
        if (username.includes(query) || email.includes(query) || honeyJar.includes(query) || createdAt.includes(query)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    }
  }

  async function editWord(id, englishWord, vietnameseMeaning) {
    const englishInput = document.getElementById("englishWord_w");
    const vietnameseInput = document.getElementById("vietnameseMeaning_w");

    englishInput.value = englishWord;
    vietnameseInput.value = vietnameseMeaning;

    document.getElementById("editFormWord").dataset.id = id;

    const modal = new bootstrap.Modal(document.getElementById("editModalWord"));

    modal.show();
  }

  async function saveWord() {
    const form = document.getElementById("editFormWord");
    const id = form.dataset.id;
    const englishWord = document.getElementById("englishWord_w").value;
    const vietnameseMeaning = document.getElementById("vietnameseMeaning_w").value;

    try {
      const response = await fetch(`${apiBaseUrl}/words/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          englishWord: englishWord,
          vietnameseMeaning: vietnameseMeaning,
        }),
      });

      if (response.ok) {
        alert("Mục đã được cập nhật thành công!");
        document.location.reload();
      } else {
        alert("Cập nhật mục thất bại. Vui lòng thử lại.");
      }
    } catch (error) {
      console.error("Lỗi khi cập nhật mục:", error);
      alert("Có lỗi xảy ra. Vui lòng thử lại.");
    }
  }
  
  async function editTrueFalse(id, content, vietnameseMeaning, answer, correction, topic) {
    document.getElementById("content_tf").value = content;
    document.getElementById("vietnameseMeaning_tf").value = vietnameseMeaning;
    document.getElementById("answer_tf").value = answer;
    document.getElementById("correction_tf").value = correction;
    document.getElementById("topic_tf").value = topic;

    document.getElementById("editFormTrueFalse").dataset.id = id;

    const modal = new bootstrap.Modal(document.getElementById("editModalTrueFalse"));
    modal.show();
  }

  async function saveTrueFalse() {
    const form = document.getElementById("editFormTrueFalse");
    const id = form.dataset.id;

    const content = document.getElementById("content_tf").value;
    const vietnameseMeaning = document.getElementById("vietnameseMeaning_tf").value;
    const answer = document.getElementById("answer_tf").value;
    const correction = document.getElementById("correction_tf").value;
    const topic = document.getElementById("topic_tf").value;

    try {
      const response = await fetch(`${apiBaseUrl}/truefalse/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          content: content,
          vietnameseMeaning: vietnameseMeaning,
          answer: answer,
          correction: correction,
          topic: topic,
        }),
      });

      if (response.ok) {
        alert("True/False question updated successfully!");
        document.location.reload(); // Reload the page to reflect the changes
      } else {
        alert("Failed to update the question. Please try again.");
      }
    } catch (error) {
      console.error("Error updating True/False question:", error);
      alert("An error occurred. Please try again.");
    }
  }

  async function editGrammar(id, content, meaning, topic, level) {
    document.getElementById("content_gr").value = content;
    document.getElementById("meaning_gr").value = meaning;
    document.getElementById("topic_gr").value = topic;
    document.getElementById("level_gr").value = level;
    
    console.log(level)
    
    document.getElementById("editFormGrammar").dataset.id = id;

    const modal = new bootstrap.Modal(document.getElementById("editModalGrammar"));
    modal.show();
  }

  async function saveGrammar() {
    const form = document.getElementById("editFormGrammar");
    const id = form.dataset.id;

    const question = document.getElementById("content_gr").value;
    const correctAns = "";
    const meaning = document.getElementById("meaning_gr").value;
    const topic = document.getElementById("topic_gr").value;
    const level = parseInt(document.getElementById("level_gr").value, 10);

    try {
      const response = await fetch(`${apiBaseUrl}/grammarquestions/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          question: question,
          correct_answer: correctAns,
          meaning: meaning,
          topic: topic,
          level: level,
        }),
      });

      if (response.ok) {
        alert("Grammar question updated successfully!");
        document.location.reload(); // Reload the page to reflect the changes
      } else {
        alert("Failed to update the question. Please try again.");
      }
    } catch (error) {
      console.error("Error updating Grammar question:", error);
      alert("An error occurred. Please try again.");
    }
  }

  async function editMovie(id, title, poster, banner, description, duration, genre, rating, year) {
    document.getElementById("title_mv").value = title;
    document.getElementById("poster_mv").value = poster;
    document.getElementById("banner_mv").value = banner;
    document.getElementById("description_mv").value = description;
    document.getElementById("duration_mv").value = duration;
    document.getElementById("genre_mv").value = genre;
    document.getElementById("rating_mv").value = rating;
    document.getElementById("year_mv").value = year;

    document.getElementById("editFormMovie").dataset.id = id;

    const modal = new bootstrap.Modal(document.getElementById("editModalMovie"));
    modal.show();
  }

  async function saveMovie() {
    const form = document.getElementById("editFormMovie");
    const id = form.dataset.id;

    const title = document.getElementById("title_mv").value;
    const poster = document.getElementById("poster_mv").value;
    const banner = document.getElementById("banner_mv").value;
    const description = document.getElementById("description_mv").value;
    const duration = document.getElementById("duration_mv").value;
    const genre = document.getElementById("genre_mv").value;
    const rating = document.getElementById("rating_mv").value;
    const year = document.getElementById("year_mv").value;

    try {
      const response = await fetch(`${apiBaseUrl}/movies/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          title: title,
          poster: poster,
          banner: banner,
          description: description,
          duration: duration,
          genre: genre,
          rating: rating,
          year: year
        }),
      });

      if (response.ok) {
        alert("Movie updated successfully!");
        document.location.reload();
      } else {
        alert("Failed to update the movie. Please try again.");
      }
    } catch (error) {
      console.error("Error updating Movie:", error);
      alert("An error occurred. Please try again.");
    }
  }

  async function editPodcast(id, title, image_url, description, duration, views, link_on_youtube) {
    document.getElementById("title_pc").value = title;
    document.getElementById("image_pc").value = image_url;
    document.getElementById("description_pc").value = description;
    document.getElementById("duration_pc").value = duration;
    document.getElementById("views_pc").value = views;
    document.getElementById("linkYT_pc").value = link_on_youtube;

    document.getElementById("editFormPodcast").dataset.id = id;

    const modal = new bootstrap.Modal(document.getElementById("editModalPodcast"));
    modal.show();
  }

  async function savePodcast() {
    const form = document.getElementById("editFormPodcast");
    const id = form.dataset.id;

    const title = document.getElementById("title_pc").value;
    const image_url = document.getElementById("image_pc").value;
    const description = document.getElementById("description_pc").value;
    const duration = document.getElementById("duration_pc").value;
    const views = document.getElementById("views_pc").value;
    const link_on_youtube = document.getElementById("linkYT_pc").value;

    try {
      const response = await fetch(`${apiBaseUrl}/podcast/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          title: title,
          image_url: image_url,
          description: description,
          duration: duration,
          views: views,
          link_on_youtube: link_on_youtube,
        }),
      });

      if (response.ok) {
        alert("Podcast updated successfully!");
        document.location.reload();
      } else {
        alert("Failed to update the podcast. Please try again.");
      }
    } catch (error) {
      console.error("Error updating Podcast:", error);
      alert("An error occurred. Please try again.");
    }
  }

  

</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
